

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 texcoord;
uniform mat4 ModelViewProjectionMatrix;

varying vec3 vVertex;
varying vec3 vVertexPosition;
varying vec2 vTexcoord;

void main() {
    vec4 position = ModelViewProjectionMatrix * vec4(vertex,1.0);

    vVertex = vertex;
    vTexcoord = texcoord;
    vVertexPosition = vec3(position) / position.w;

    gl_Position = position;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 vVertex;
varying vec3 vVertexPosition;
varying vec2 vTexcoord;

uniform mat4 normalMatrix;
uniform vec3 lightPosition;
uniform sampler2D uTexture;

vec3 calculate_light(vec3 position) {
    vec3 shape_color = vec3(1., 1., 1.);
    vec3 light_color = vec3(0., 1., 1.);

    vec3 ambient = light_color * 0.2;

    vec3 normal = normalize(vec3(normalMatrix * vec4(vVertex, 0.)));
    vec3 light_direction = normalize(lightPosition - position);
    float dot_light = max(dot(normal, light_direction), 0.0);
    vec3 diffuse = shape_color * dot_light;

    float specular_strength = 0.5;
    float spec = 0.;
    if (dot_light > 0.) {
        vec3 view_dir = normalize(-position);
        vec3 reflect_dir = reflect(-light_direction, normal);
        float spec_angle = max(dot(view_dir, reflect_dir), 0.0);
        spec = pow(spec_angle, 32.);
    }
    vec3 specular = specular_strength * spec * light_color;

    return ambient + diffuse + specular;
}

void main() {
    vec4 texture = texture2D(uTexture, vTexcoord);
    vec4 lightColor = vec4(calculate_light(vVertexPosition), 1.);
    gl_FragColor = texture * lightColor;
}`;
